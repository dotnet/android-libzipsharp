trigger:
  branches:
    include:
      - main
      - refs/tags/*

resources:
  repositories:
    - repository: internal-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin
      ref: refs/heads/main
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

parameters:
- name: OneLocSourceBranch
  default: refs/heads/main
- name: Skip1ESComplianceTasks
  default: false
- name: SignArtifacts
  default: false

variables:
- group: Xamarin-Secrets
- name: DisablePipelineConfigDetector
  value: true

extends:
  ${{ if or(eq(variables['Build.Reason'], 'PullRequest'), eq('${{ parameters.Skip1ESComplianceTasks }}', 'true')) }}:
    template: v1/1ES.Unofficial.PipelineTemplate.yml@1esPipelines
  ${{ else }}:
    template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      ${{ if eq('${{ parameters.Skip1ESComplianceTasks }}', 'true') }}:
        enableAllTools: false
      codeql:
        runSourceLanguagesInSourceAnalysis: true
      suppression:
        suppressionFile: $(Build.SourcesDirectory)/.gdn/.gdnsuppress
      sourceAnalysisPool:
        name: AzurePipelines-EO
        image: AzurePipelinesWindows2022compliantGPT
    stages:
      - stage: Build
        jobs:
        - job: buildWindows
          pool:
            name: AzurePipelines-EO
            image: AzurePipelinesWindows2022compliantGPT
          variables:
            Codeql.Enabled: true
          templateContext:
            outputs:
            - output: pipelineArtifact
              displayName: upload artifacts
              artifactName: native - windows
              targetPath: $(Build.ArtifactStagingDirectory)
          steps:
            - script: |
                echo "Hello"
                git submodule update --init --recursive
              displayName: "Update Submodules"
            - script: |
                build_windows.bat
              displayName: "Build"
            - task: ArchiveFiles@2
              inputs:
                rootFolderOrFile: lzsbuild\lib\win32\RelWithDebInfo\
                includeRootFolder: false
                archiveType: 7z
                replaceExistingArchive: true
                archiveFile: $(Build.ArtifactStagingDirectory)\libzip-windows-x86.7z
            - task: ArchiveFiles@2
              inputs:
                rootFolderOrFile: lzsbuild\lib\win64\RelWithDebInfo\
                includeRootFolder: false
                archiveType: 7z
                replaceExistingArchive: true
                archiveFile: $(Build.ArtifactStagingDirectory)\libzip-windows-x64.7z
            - task: ArchiveFiles@2
              inputs:
                rootFolderOrFile: lzsbuild\lib\winarm64\RelWithDebInfo\
                includeRootFolder: false
                archiveType: 7z
                replaceExistingArchive: true
                archiveFile: $(Build.ArtifactStagingDirectory)\libzip-windows-arm-x64.7z

        - job: buildLinux
          pool:
            name: AzurePipelines-EO
            image: AzurePipelinesUbuntu22.04compliantGPT
            os: linux
          templateContext:
            outputs:
            - output: pipelineArtifact
              displayName: upload artifacts
              artifactName: native - linux
              targetPath: $(Build.ArtifactStagingDirectory)
          steps:
            - bash: |
                sudo dpkg --add-architecture i386
                sudo apt -y update
                sudo apt -f -u install ninja-build -y
                git submodule update --init --recursive
              displayName: 'Install Tools'
            - bash: |
                ./build.sh -v
              displayName: 'Build Linux x64'
            - task: ArchiveFiles@2
              inputs:
                rootFolderOrFile: lzsbuild/lib/Linux/
                includeRootFolder: false
                archiveType: 7z
                replaceExistingArchive: true
                archiveFile: $(Build.ArtifactStagingDirectory)/libzip-linux-x64.7z

        - job: buildMacOS
          dependsOn:
            - buildlinux
            - buildWindows
          pool:
            name: Azure Pipelines
            vmImage: macOS-12
            os: macOS
          templateContext:
            outputs:
            - output: pipelineArtifact
              displayName: upload artifacts
              artifactName: nuget
              targetPath: $(Build.ArtifactStagingDirectory)
          steps:
            - bash: |
                brew install ninja
                git submodule update --init --recursive
              displayName: 'Install toolchain'
            - bash: |
                ./build.sh -v
                mkdir -p lzsbuild/lib/Linux
                mkdir -p lzsbuild/lib/win64
                mkdir -p lzsbuild/lib/win32
                find lzsbuild -name '*ZipSharpNative*'
              displayName: 'Build native'
            - task: DownloadPipelineArtifact@2
              displayName: download windows artifacts
              inputs:
                artifactName: native - windows
                downloadPath: $(Build.ArtifactStagingDirectory)
            - task: DownloadPipelineArtifact@2
              displayName: download linux artifacts
              inputs:
                artifactName: native - linux
                downloadPath: $(Build.ArtifactStagingDirectory)
            - task: ExtractFiles@1
              displayName: Extract 64 bit Linux native
              inputs:
                archiveFilePatterns: $(Build.ArtifactStagingDirectory)/libzip-linux-x64.7z
                destinationFolder: lzsbuild/lib/Linux
            - task: ExtractFiles@1
              displayName: Extract 64 bit Windows native
              inputs:
                archiveFilePatterns: $(Build.ArtifactStagingDirectory)/libzip-windows-x64.7z
                destinationFolder: lzsbuild/lib/win64
            - task: ExtractFiles@1
              displayName: Extract 64 bit ARM Windows native
              inputs:
                archiveFilePatterns: $(Build.ArtifactStagingDirectory)/libzip-windows-arm-x64.7z
                destinationFolder: lzsbuild/lib/winarm64
            - task: ExtractFiles@1
              displayName: Extract 32 bit Windows native
              inputs:
                archiveFilePatterns: $(Build.ArtifactStagingDirectory)/libzip-windows-x86.7z
                destinationFolder: lzsbuild/lib/win32
            - bash: |
                rm $(Build.ArtifactStagingDirectory)/libzip-linux-*.7z
                rm $(Build.ArtifactStagingDirectory)/libzip-windows-*.7z
              displayName: 'Find libzip'
            - task: DotNetCoreCLI@2
              displayName: 'Build solution libZipSharp.csproj'
              inputs:
                projects:  LibZipSharp/libZipSharp.csproj
                configuration: Release
                arguments: -v:diag -p:RunningOnCI=true
            - task: DotNetCoreCLI@2
              displayName: NuGet pack libZipSharp
              inputs:
                projects:  LibZipSharp/libZipSharp.csproj
                configuration: Release
                arguments: -t:Pack
            - task: CopyFiles@2
              displayName: Copy nupkg
              inputs:
                contents: 'LibZipSharp/*.nupkg'
                flattenFolders: true
                targetFolder: $(Build.ArtifactStagingDirectory)
            - task: CopyFiles@2
              displayName: Copy SignList
              inputs:
                contents: 'SignList.xml'
                targetFolder: $(Build.ArtifactStagingDirectory)
            - task: CopyFiles@2
              displayName: Copy snupkg
              inputs:
                contents: 'LibZipSharp/*.snupkg'
                flattenFolders: true
                targetFolder: $(Build.ArtifactStagingDirectory)

      - stage: Test
        dependsOn: Build
        variables:
          DotNetCoreVersion: 3.1.201
          DotNetVersion: 7.0.203
        jobs:
        - job: testlinux
          displayName: 'Test Linux'
          pool:
            name: AzurePipelines-EO
            image: AzurePipelinesUbuntu22.04compliantGPT
            os: linux
          steps:
            - template: yaml-templates/use-dot-net.yaml@self
              parameters:
                version: $(DotNetCoreVersion)
            - template: yaml-templates/use-dot-net.yaml@self
              parameters:
                version: $(DotNetVersion)
            - task: DownloadPipelineArtifact@2
              displayName: download artifacts
              inputs:
                artifactName: nuget
                downloadPath: $(Build.SourcesDirectory)
            - task: DotNetCoreCLI@2
              displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
              inputs:
                projects:  LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
                configuration: Release
                arguments: -p:ReferenceNuget=True -v:diag
            - task: DotNetCoreCLI@2
              displayName: 'Run Unit tests for .net'
              inputs:
                command: test
                projects:  LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
                configuration: Release
                arguments: -p:ReferenceNuget=True -v:diag

        - job: testmacos
          displayName: 'Test MacOS'
          pool:
            name: Azure Pipelines
            vmImage: macOS-12
            os: macOS
          steps:
            - template: yaml-templates/use-dot-net.yaml@self
              parameters:
                version: $(DotNetCoreVersion)
            - template: yaml-templates/use-dot-net.yaml@self
              parameters:
                version: $(DotNetVersion)
            - task: DownloadPipelineArtifact@2
              displayName: download artifacts
              inputs:
                artifactName: nuget
                downloadPath: $(Build.SourcesDirectory)
            - task: DotNetCoreCLI@2
              displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
              inputs:
                projects:  LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
                configuration: Release
                arguments: -p:ReferenceNuget=True -v:diag
            - task: DotNetCoreCLI@2
              displayName: 'Run Tests under .net'
              inputs:
                command: test
                projects:  LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
                configuration: Release
                arguments: -p:ReferenceNuget=True -v:diag

        - job: testwindows
          displayName: 'Test Windows'
          pool:
            name: AzurePipelines-EO
            image: AzurePipelinesWindows2022compliantGPT
          steps:
            - template: yaml-templates/use-dot-net.yaml@self
              parameters:
                version: $(DotNetCoreVersion)
            - template: yaml-templates/use-dot-net.yaml@self
              parameters:
                version: $(DotNetVersion)
            - task: DownloadPipelineArtifact@2
              displayName: download artifacts
              inputs:
                artifactName: nuget
                downloadPath: $(Build.SourcesDirectory)
            - task: DotNetCoreCLI@2
              displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
              inputs:
                projects:  LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
                configuration: Release
                arguments: -p:ReferenceNuget=True -v:diag
            - task: DotNetCoreCLI@2
              displayName: 'Run Tests LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
              inputs:
                command: test
                projects:  LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
                configuration: Release
                arguments: -p:ReferenceNuget=True -v:diag

      - stage: Publish
        dependsOn: Build
        condition: and(eq(dependencies.mac_build.result, 'Succeeded'), eq(variables['System.TeamProject'], 'devdiv')) # only sign the packages when running on Windows, and using the private server which has the certificates
        jobs:
        - template: sign-artifacts/jobs/v2.yml@internal-templates
          parameters:
            usePipelineArtifactTasks: true
            use1ESTemplate: true
            signListPath: 'SignList.xml'
            condition: or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq('${{ parameters.SignArtifacts }}', 'true'))

      - stage: Localization
        dependsOn: []
        condition: and(eq(variables['System.TeamProject'], 'DevDiv'), eq(variables['Build.SourceBranch'], '${{ parameters.OneLocSourceBranch }}'))
        jobs:
        - job: OneLocBuild
          displayName: OneLocBuild
          pool: VSEngSS-MicroBuild2022-1ES
          timeoutInMinutes: 30
          variables:
          - group: Xamarin-Secrets
          workspace:
            clean: all
          templateContext:
            outputs:
            - output: pipelineArtifact
              displayName: Publish Localization Files
              condition: succeededOrFailed()
              targetPath: $(Build.StagingDirectory)/loc
              artifactName: Loc
          steps:
          - checkout: self
            clean: true

          - task: OneLocBuild@2
            displayName: OneLocBuild
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            inputs:
              locProj: Localize/LocProject.json
              outDir: $(Build.StagingDirectory)
              packageSourceAuth: patAuth
              patVariable: $(OneLocBuild--PAT)
              isCreatePrSelected: true
              repoType: gitHub
              gitHubPatVariable: $(github--pat--vs-mobiletools-engineering-service2)
              prSourceBranchPrefix: locpr
              isShouldReusePrSelected: true
              isAutoCompletePrSelected: false
              isUseLfLineEndingsSelected: true
