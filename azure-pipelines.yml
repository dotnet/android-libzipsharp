trigger:
  branches:
    include:
      - main
      - refs/tags/*
resources:
  repositories:
    - repository: internal-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin
      ref: refs/heads/main
variables:
  - group: Xamarin-Secrets
stages:
  - stage: Build
    jobs:
    - job: buildWindows
      pool:
        name: AzurePipelines-EO
        demands:
        - ImageOverride -equals AzurePipelinesWindows2022compliant
      steps:
        - script: |
            echo "Hello"
            git submodule update --init --recursive
          displayName: "Update Submodules"
        - script: |
            build_windows.bat
          displayName: "Build"
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: lzsbuild\lib\win32\RelWithDebInfo\
            includeRootFolder: false
            archiveType: 7z
            replaceExistingArchive: true
            archiveFile: $(Build.ArtifactStagingDirectory)\libzip-windows-x86.7z
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: lzsbuild\lib\win64\RelWithDebInfo\
            includeRootFolder: false
            archiveType: 7z
            replaceExistingArchive: true
            archiveFile: $(Build.ArtifactStagingDirectory)\libzip-windows-x64.7z
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: lzsbuild\lib\winarm64\RelWithDebInfo\
            includeRootFolder: false
            archiveType: 7z
            replaceExistingArchive: true
            archiveFile: $(Build.ArtifactStagingDirectory)\libzip-windows-arm-x64.7z
        - task: PublishBuildArtifacts@1
          displayName: upload artifacts
          inputs:
            artifactName: 'native'
            pathtoPublish: $(Build.ArtifactStagingDirectory)
    - job: buildLinux
      pool:
        name: AzurePipelines-EO
        demands:
        - ImageOverride -equals AzurePipelinesUbuntu18.04compliant
      steps:
        - bash: |
            sudo dpkg --add-architecture i386
            sudo apt -y update
            sudo apt -f -u install ninja-build -y
            git submodule update --init --recursive
          displayName: 'Install Tools'
        - bash: |
            ./build.sh -v
          displayName: 'Build Linux x64'
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: lzsbuild/lib/Linux/
            includeRootFolder: false
            archiveType: 7z
            replaceExistingArchive: true
            archiveFile: $(Build.ArtifactStagingDirectory)/libzip-linux-x64.7z
        - task: PublishBuildArtifacts@1
          displayName: upload artifacts
          inputs:
            artifactName: 'native'
            pathtoPublish: $(Build.ArtifactStagingDirectory)
    - job: buildMacOS
      dependsOn:
        - buildlinux
        - buildWindows
      pool:
        vmImage: internal-macos-11
      steps:
        - bash: |
            brew install ninja
            git submodule update --init --recursive
          displayName: 'Install toolchain'
        - bash: |
            ./build.sh -v
            mkdir -p lzsbuild/lib/Linux
            mkdir -p lzsbuild/lib/win64
            mkdir -p lzsbuild/lib/win32
            find lzsbuild -name '*ZipSharpNative*'
          displayName: 'Build native'
        - task: DownloadBuildArtifacts@0
          displayName: download artifacts
          inputs:
            artifactName: native
            downloadPath: $(Build.ArtifactStagingDirectory)
        - task: ExtractFiles@1
          displayName: Extract 64 bit Linux native
          inputs:
            archiveFilePatterns: $(Build.ArtifactStagingDirectory)/native/libzip-linux-x64.7z
            destinationFolder: lzsbuild/lib/Linux
        - task: ExtractFiles@1
          displayName: Extract 64 bit Windows native
          inputs:
            archiveFilePatterns: $(Build.ArtifactStagingDirectory)/native/libzip-windows-x64.7z
            destinationFolder: lzsbuild/lib/win64
        - task: ExtractFiles@1
          displayName: Extract 64 bit ARM Windows native
          inputs:
            archiveFilePatterns: $(Build.ArtifactStagingDirectory)/native/libzip-windows-arm-x64.7z
            destinationFolder: lzsbuild/lib/winarm64
        - task: ExtractFiles@1
          displayName: Extract 32 bit Windows native
          inputs:
            archiveFilePatterns: $(Build.ArtifactStagingDirectory)/native/libzip-windows-x86.7z
            destinationFolder: lzsbuild/lib/win32
        - bash: |
            rm $(Build.ArtifactStagingDirectory)/native/libzip-linux-*.7z
            rm $(Build.ArtifactStagingDirectory)/native/libzip-windows-*.7z
          displayName: 'Find libzip'
        - task: MSBuild@1
          displayName: 'Build solution libZipSharp.csproj'
          inputs:
            solution: LibZipSharp/libZipSharp.csproj
            configuration: Release
            msbuildArguments: /restore /v:diag /p:RunningOnCI=true
        - task: MSBuild@1
          displayName: NuGet pack libZipSharp
          inputs:
            solution: LibZipSharp/libZipSharp.csproj
            configuration: Release
            msbuildArguments: /t:Pack
        - task: CopyFiles@2
          displayName: Copy nupkg
          inputs:
            contents: 'LibZipSharp/*.nupkg'
            flattenFolders: true
            targetFolder: $(Build.ArtifactStagingDirectory)
        - task: CopyFiles@2
          displayName: Copy SignList
          inputs:
            contents: 'SignList.xml'
            targetFolder: $(Build.ArtifactStagingDirectory)
        - task: CopyFiles@2
          displayName: Copy snupkg
          inputs:
            contents: 'LibZipSharp/*.snupkg'
            flattenFolders: true
            targetFolder: $(Build.ArtifactStagingDirectory)
        - task: PublishBuildArtifacts@1
          displayName: upload artifacts
          inputs:
            artifactName: 'nuget'
            pathtoPublish: $(Build.ArtifactStagingDirectory)
  - stage: Test
    dependsOn: Build
    variables:
      DotNetCoreVersion: 3.1.201
    jobs:
    - job: testlinux
      displayName: 'Test Linux'
      pool:
        name: AzurePipelines-EO
        demands:
        - ImageOverride -equals AzurePipelinesUbuntu18.04compliant
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: download artifacts
          inputs:
            artifactName: NuGet
            downloadPath: $(Build.SourcesDirectory)
        - task: MSBuild@1
          displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
          inputs:
            solution: LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
            configuration: Release
            msbuildArguments: /restore /p:ReferenceNuget=True /v:diag
        - task: MSBuild@1
          displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
          inputs:
            solution: LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
            configuration: Release
            msbuildArguments: /restore /t:RunNunitTests /p:ReferenceNuget=True /v:diag
        - task: DotNetCoreCLI@2
          displayName: "Run Tests under .net Core"
          inputs:
            command: test
            arguments: 'LibZipSharp.UnitTest/bin/Release/netcoreapp3.1/LibZipSharp.UnitTest.dll'
    - job: testmacos
      displayName: 'Test MacOS'
      pool:
        vmImage: internal-macos-11
      steps:
        - template: yaml-templates/use-dot-net.yaml
          parameters:
            version: $(DotNetCoreVersion)
        - task: DownloadBuildArtifacts@0
          displayName: download artifacts
          inputs:
            artifactName: NuGet
            downloadPath: $(Build.SourcesDirectory)
        - task: MSBuild@1
          displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
          inputs:
            solution: LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
            configuration: Release
            msbuildArguments: /restore /p:ReferenceNuget=True /v:diag
        - task: MSBuild@1
          displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
          inputs:
            solution: LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
            configuration: Release
            msbuildArguments: /restore /t:RunNunitTests /p:ReferenceNuget=True /v:diag
        - task: DotNetCoreCLI@2
          displayName: "Run Tests under .net Core"
          inputs:
            command: test
            arguments: 'LibZipSharp.UnitTest/bin/Release/netcoreapp3.1/LibZipSharp.UnitTest.dll'
    - job: testwindows
      displayName: 'Test Windows'
      pool:
        name: AzurePipelines-EO
        demands:
        - ImageOverride -equals AzurePipelinesWindows2022compliant
      steps:
        - template: yaml-templates/use-dot-net.yaml
          parameters:
            version: $(DotNetCoreVersion)
        - task: DownloadBuildArtifacts@0
          displayName: download artifacts
          inputs:
            artifactName: NuGet
            downloadPath: $(Build.SourcesDirectory)
        - task: MSBuild@1
          displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
          inputs:
            solution: LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
            configuration: Release
            msbuildArguments: /restore /p:ReferenceNuget=True /v:diag
        - task: MSBuild@1
          displayName: 'Run Tests LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
          inputs:
            solution: LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
            configuration: Release
            msbuildArguments: /restore /t:RunNunitTests /p:ReferenceNuget=True /v:diag
        - task: DotNetCoreCLI@2
          displayName: "Run Tests under .net Core"
          inputs:
            command: test
            arguments: 'LibZipSharp.UnitTest\bin\Release\netcoreapp3.1\LibZipSharp.UnitTest.dll'

  - stage: Publish
    dependsOn: Test
    condition: eq(variables['System.TeamProject'], 'devdiv') # only sign the packages when running on Windows, and using the private server which has the certificates
    jobs:
    - template: sign-artifacts/jobs/v2.yml@internal-templates
      parameters:
        signListPath: 'SignList.xml'
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

  - stage: Localization
    dependsOn: []
    condition: and(eq(variables['System.TeamProject'], 'DevDiv'), eq(variables['Build.SourceBranch'], 'refs/heads/dev/pjc/oneloc'))
    jobs:
    - job: OneLocBuild
      displayName: OneLocBuild
      pool: VSEngSS-MicroBuild2022-1ES
      timeoutInMinutes: 30
      variables:
      - group: Xamarin-Secrets
      workspace:
        clean: all
      steps:
      - checkout: self
        clean: true

      - task: OneLocBuild@2
        displayName: OneLocBuild
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        inputs:
          locProj: Localize/LocProject.json
          outDir: $(Build.StagingDirectory)
          packageSourceAuth: patAuth
          patVariable: $(OneLocBuild--PAT)
          isCreatePrSelected: true
          repoType: gitHub
          gitHubPatVariable: $(github--pat--vs-mobiletools-engineering-service2)
          prSourceBranchPrefix: locpr
          isShouldReusePrSelected: true
          isAutoCompletePrSelected: false
          isUseLfLineEndingsSelected: true

      - task: PublishBuildArtifacts@1
        displayName: Publish Localization Files
        inputs:
          PathtoPublish: $(Build.StagingDirectory)/loc
          ArtifactName: Loc
        condition: succeededOrFailed()
