trigger:
  branches:
    include:
      - master
      - refs/tags/*
resources:
  repositories:
    - repository: xamarin-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin
variables:
  - group: Xamarin-Secrets
stages:
  - stage: Build
    jobs:
    - job: buildWindows
      pool:
        vmImage: vs2017-win2016
      steps:
        - script: |
            echo "Hello"
            git submodule update --init --recursive
            cd external/vcpkg
            bootstrap-vcpkg.bat
          displayName: "Build vcpkg"
        - script: |
            external\vcpkg\vcpkg.exe integrate install
            external\vcpkg\vcpkg.exe install zlib:x64-windows-static bzip2:x64-windows-static
            mkdir .\build\Windows\64
            cd .\build\Windows\64
            cmake -DCMAKE_TOOLCHAIN_FILE=..\..\..\external\vcpkg\scripts\buildsystems\vcpkg.cmake ..\..\..\external\libzip -G "Visual Studio 15 2017 Win64" -DBUILD_SHARED_LIBS=on -DVCPKG_TARGET_TRIPLET=x64-windows-static
            cmake --build . --config Release
          displayName: "x64 Build"
        - script: |
            external\vcpkg\vcpkg.exe integrate install
            external\vcpkg\vcpkg.exe install zlib:x86-windows-static bzip2:x86-windows-static
            mkdir .\build\Windows\32
            cd .\build\Windows\32
            cmake -DCMAKE_TOOLCHAIN_FILE=..\..\..\external\vcpkg\scripts\buildsystems\vcpkg.cmake ..\..\..\external\libzip -G "Visual Studio 15 2017" -DBUILD_SHARED_LIBS=on -DVCPKG_TARGET_TRIPLET=x86-windows-static
            cmake --build . --config Release
          displayName: "x86 Build"
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: build\Windows\64\lib\Release\zip.dll
            includeRootFolder: false 
            archiveType: 7z
            replaceExistingArchive: true 
            archiveFile: $(Build.ArtifactStagingDirectory)\libzip-windows-x86.7z
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: build\Windows\64\lib\Release\zip.dll
            includeRootFolder: false 
            archiveType: 7z
            replaceExistingArchive: true 
            archiveFile: $(Build.ArtifactStagingDirectory)\libzip-windows-x64.7z
        - task: PublishBuildArtifacts@1
          displayName: upload artifacts
          inputs:
            artifactName: 'native'
            pathtoPublish: $(Build.ArtifactStagingDirectory)
    - job: buildlinux
      pool:
        vmImage: ubuntu-16.04
      steps:
        - bash: |
            sudo dpkg --add-architecture i386
            sudo apt -y update
            sudo apt -f -u install ninja-build gcc-multilib lib32z1-dev zlib1g-dev libssl-dev libssl1.1:i386 libssl-dev:i386 libc-dev:i386 libc6-dev-i386 -y
            git submodule update --init --recursive
          displayName: 'Install Tools'
        - bash: |
            patch --verbose -d external/libzip -p1 -l < libzip-static.patch
          displayName: 'Apply Patch'
        - bash: |
            ./build_native
          displayName: 'Build Linux x64'
        - bash: |
            PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig ARCH=32 TOOLCHAIN_FILE=../../../linux-32.cmake ./build_native
            find build/* | grep libzip
          displayName: 'Build Linux x86'
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: build/Linux/32/lib/libzip.so.5.1
            includeRootFolder: false 
            archiveType: 7z
            replaceExistingArchive: true 
            archiveFile: $(Build.ArtifactStagingDirectory)/libzip-linux-x86.7z
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: build/Linux/64/lib/libzip.so.5.1
            includeRootFolder: false 
            archiveType: 7z
            replaceExistingArchive: true 
            archiveFile: $(Build.ArtifactStagingDirectory)/libzip-linux-x64.7z
        - task: PublishBuildArtifacts@1
          displayName: upload artifacts
          inputs:
            artifactName: 'native'
            pathtoPublish: $(Build.ArtifactStagingDirectory)
    - job: build
      dependsOn:
        - buildlinux
        - buildWindows
      pool:
        vmImage: macOS-10.14
      steps:
        - bash: |
            brew install p7zip ninja
            git submodule update --init --recursive
        - bash: |
            HOSTOS=Darwin ./build_native
          displayName: 'Build Darwin'
        - bash: |
            mkdir -p build/Linux/64
            mkdir -p build/Linux/32
            mkdir -p build/Windows/64
            mkdir -p build/Windows/32
            find build/* | grep libzip
        - task: DownloadBuildArtifacts@0
          displayName: download artifacts
          inputs:
            artifactName: native
            downloadPath: $(Build.ArtifactStagingDirectory)
        - task: ExtractFiles@1
          displayName: Extract 64 bit Linux native
          inputs:
            archiveFilePatterns: $(Build.ArtifactStagingDirectory)/native/libzip-linux-x64.7z
            destinationFolder: build/Linux/64
        - task: ExtractFiles@1
          displayName: Extract 32 bit Linux native
          inputs:
            archiveFilePatterns: $(Build.ArtifactStagingDirectory)/native/libzip-linux-x86.7z
            destinationFolder: build/Linux/32
        - task: ExtractFiles@1
          displayName: Extract 64 bit Windows native
          inputs:
            archiveFilePatterns: $(Build.ArtifactStagingDirectory)/native/libzip-windows-x64.7z
            destinationFolder: build/Windows/64
        - task: ExtractFiles@1
          displayName: Extract 32 bit Windows native
          inputs:
            archiveFilePatterns: $(Build.ArtifactStagingDirectory)/native/libzip-windows-x86.7z
            destinationFolder: build/Windows/32
        - bash: |
            mv build/Linux/32/libzip.so.5.1 build/Linux/32/libzip.so
            mv build/Linux/64/libzip.so.5.1 build/Linux/64/libzip.so
            mv build/Windows/32/zip.dll build/Windows/32/libzip.dll
            mv build/Windows/64/zip.dll build/Windows/64/libzip.dll
            rm $(Build.ArtifactStagingDirectory)/native/libzip-linux-*.7z
            rm $(Build.ArtifactStagingDirectory)/native/libzip-windows-*.7z
          displayName: 'Find libzip'
        - task: MSBuild@1
          displayName: 'Build solution libZipSharp.csproj'
          inputs:
            solution: libZipSharp.csproj
            configuration: Release
            msbuildArguments: /restore /v:diag 
        - task: MSBuild@1
          displayName: NuGet pack libZipSharp
          inputs:
            solution: libZipSharp.csproj
            configuration: Release
            msbuildArguments: /t:Pack
        - task: CopyFiles@2
          displayName: Copy nupkg
          inputs:
            contents: '*.nupkg'
            targetFolder: $(Build.ArtifactStagingDirectory)
        - task: CopyFiles@2
          displayName: Copy snupkg
          inputs:
            contents: '*.snupkg'
            targetFolder: $(Build.ArtifactStagingDirectory)
        - task: PublishBuildArtifacts@1
          displayName: upload artifacts
          inputs:
            artifactName: 'nuget'
            pathtoPublish: $(Build.ArtifactStagingDirectory)
  - stage: Test
    dependsOn: Build 
    jobs:
    - job: testlinux
      displayName: 'Test Linux'
      pool:
        vmImage: ubuntu-16.04
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: download artifacts
          inputs:
            artifactName: NuGet
            downloadPath: $(Build.SourcesDirectory)
        - task: MSBuild@1
          displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
          inputs:
            solution: LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
            configuration: Release
            msbuildArguments: /restore /t:RunNunitTests /p:ReferenceNuget=True /v:diag
        - task: DotNetCoreCLI@2
          displayName: "Run Tests under .net Core"
          inputs:
            command: test
            projects: 'LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
            arguments: '--configuration Release --framework netcoreapp3.1 --no-build'
    - job: testmacos
      displayName: 'Test MacOS'
      pool:
        vmImage: macOS-10.14 
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: download artifacts
          inputs:
            artifactName: NuGet
            downloadPath: $(Build.SourcesDirectory)
        - task: UseDotNet@2
          inputs:
            version: '3.1.x'
        - task: MSBuild@1
          displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
          inputs:
            solution: LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
            configuration: Release
            msbuildArguments: /restore /t:RunNunitTests /p:ReferenceNuget=True /v:diag
        # - task: DotNetCoreCLI@2
        #   displayName: "Run Tests under .net Core"
        #   inputs:
        #     command: test
        #     projects: 'LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
        #     arguments: '--configuration Release --framework netcoreapp3.1 --no-build'
    - job: testwindows
      displayName: 'Test Windows'
      pool:
        vmImage: windows-2019
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: download artifacts
          inputs:
            artifactName: NuGet
            downloadPath: $(Build.SourcesDirectory)
        - task: MSBuild@1
          displayName: 'Build solution LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj and Run tests'
          inputs:
            solution: LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj
            configuration: Release
            msbuildArguments: /restore /t:RunNunitTests /p:ReferenceNuget=True /v:diag
        - task: DotNetCoreCLI@2
          displayName: "Run Tests under .net Core"
          inputs:
            command: test
            projects: 'LibZipSharp.UnitTest/LibZipSharp.UnitTest.csproj'
            arguments: '--configuration Release --framework netcoreapp3.1 --no-build'
  - stage: Publish
    dependsOn: Test
    condition: eq(variables['System.TeamProject'], 'devdiv') # only sign the packages when running on Windows, and using the private server which has the certificates
    jobs:
    - job: signing
      displayName: Signing NuGets
      pool:
        name: VSEng-XamarinCustom
        demands:
          - corpnet
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'],'refs/tags/'))
      steps:
        # don't checkout code and sign the packages
        - checkout: none
        - template: sign-artifacts.yml@xamarin-templates
          parameters:
            targetFolder: '$(Build.ArtifactStagingDirectory)/signed'
        # publish the signed packages
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Signed NuGets'
          inputs:
            artifactName: nuget-signed
            pathToPublish: '$(Build.ArtifactStagingDirectory)/signed'