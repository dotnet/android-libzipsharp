<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MustNotBeNullOrEmpty_string" xml:space="preserve">
    <value>„{0}“ darf nicht NULL oder leer sein.</value>
    <comment>{0} - The name of the parameter</comment>
  </data>
  <data name="InvalidEntryType_string_type" xml:space="preserve">
    <value>„{0}“ ist eine Instanz von „{1}“, was kein gültiger Eintragstyp ist. Der erwartete Typ ist „{2}“.</value>
    <comment>{0} - The name of the parameter.
{1} - The expected type of the parameter.
{2} - The actual type of the parameter.</comment>
  </data>
  <data name="UnsupportedPermission_UnixExternalPermissions" xml:space="preserve">
    <value>„{0}“ ist kein unterstützter Dateityp. Derzeit werden nur reguläre Dateien, Verzeichnisse und symbolische Verknüpfungen unterstützt.</value>
    <comment>{0} - The name of the permission.</comment>
  </data>
  <data name="MustBeAnInstanceOf_string_type" xml:space="preserve">
    <value>„{0}“ muss eine Instanz von „{1}“ sein.</value>
    <comment>{0} - The name of the parameter.
{1} - The type the parameter should be.</comment>
  </data>
  <data name="ExpectedAnInstanceOf_string_type" xml:space="preserve">
    <value>„{0}“ ist eine Instanz von „{1}“ anstelle des erwarteten Typs „{2}“.</value>
    <comment>{0} - The expected type of the parameter.
{1} - The name of the parameter.
{2} - The actual type of the parameter.</comment>
  </data>
  <data name="UnableToDetermineFileType_file" xml:space="preserve">
    <value>Fehler beim Ermitteln des Typs der Datei „{0}“.</value>
    <comment>{0} - A filename</comment>
  </data>
  <data name="FailedToReadSymLink_link_error" xml:space="preserve">
    <value>Die symbolische Verknüpfung „{0}“ konnte nicht gelesen werden: {1}.</value>
    <comment>{0} - The symbolic link that was being read.
{1} - The actual error message reported by the operating system.</comment>
  </data>
  <data name="FileTypeNotSupported_filetype" xml:space="preserve">
    <value>Das Speichern von Dateien vom Typ „{0}“ wird nicht unterstützt.</value>
    <comment>{0} - The type of the file.</comment>
  </data>
  <data name="FailedToSetOwner_entry_error_oserror" xml:space="preserve">
    <value>Warnung: Fehler beim Festlegen des Besitzers des Eintrags „{0}“ ({1}:{2}).</value>
    <comment>{0} - A filename.
{1} - The error message.
{2} - The operating system error.</comment>
  </data>
  <data name="FailedToStatFile_file_error" xml:space="preserve">
    <value>Warnung: Fehler beim Statieren der Datei „{0}“: {1}.</value>
    <comment>{0} - A filename.
{1} - The error message.</comment>
  </data>
  <data name="UnexpectedOptionsType_string_type_type" xml:space="preserve">
    <value>„{0}“ ist eine Instanz von „{1}“, was kein gültiger Optionstyp ist. Der erwartete Typ ist „{2}“.</value>
    <comment>{0} - The parameter name.
{1} - The expected type of the parameter.
{2} - The actual type of the parameter.</comment>
  </data>
  <data name="FileAlreadyExists" xml:space="preserve">
    <value>Die Datei ist bereits vorhanden.</value>
  </data>
  <data name="FilePathAlreadyExists_file" xml:space="preserve">
    <value>Die Datei „{0}“ ist bereits vorhanden.</value>
    <comment>{0} - A filename.</comment>
  </data>
  <data name="OutOfMemory" xml:space="preserve">
    <value>Libzip ist aufgrund von nicht genügend Arbeitsspeicher fehlgeschlagen.</value>
    <comment>The following terms should not be translated: libzip</comment>
  </data>
  <data name="StreamFailedConsistencyChecks" xml:space="preserve">
    <value>Konsistenzprüfungen für den Stream sind fehlgeschlagen..</value>
  </data>
  <data name="StreamDoesNotExist" xml:space="preserve">
    <value>Der Stream ist nicht vorhanden, und die Dateierstellung wurde nicht angefordert.</value>
  </data>
  <data name="StreamIsNotAZip" xml:space="preserve">
    <value>Stream ist kein ZIP-Archiv.</value>
  </data>
  <data name="StreamCouldNotBeOpened" xml:space="preserve">
    <value>Der Stream konnte nicht geöffnet werden.</value>
  </data>
  <data name="ErrorReadingStream" xml:space="preserve">
    <value>Beim Lesen des Streams ist ein Fehler aufgetreten.</value>
  </data>
  <data name="StreamDoesNotSupportSeeking" xml:space="preserve">
    <value>Der Stream unterstützt das Suchen nicht.</value>
  </data>
  <data name="UnexpectedLibZipError_error" xml:space="preserve">
    <value>Unerwarteter Libzip-Fehler: {0}.</value>
    <comment>The following is the name of a library and should not be translated: libzip
{0} - An error message from libzip.</comment>
  </data>
  <data name="FileFailedConsistencyChecks_file" xml:space="preserve">
    <value>Konsistenzprüfungen für die Datei {0} sind fehlgeschlagen.</value>
    <comment>{0} - A filename.</comment>
  </data>
  <data name="FileDoesNotExist_file" xml:space="preserve">
    <value>Die Datei „{0}2 ist nicht vorhanden, und die Dateierstellung wurde nicht angefordert.</value>
    <comment>{0} - A filename.</comment>
  </data>
  <data name="FileIsNotAZip_file" xml:space="preserve">
    <value>Die Datei „{0}“ ist kein ZIP-Archiv.</value>
    <comment>{0} - A filename.</comment>
  </data>
  <data name="FileCouldNotBeOpened_file" xml:space="preserve">
    <value>Die Datei '{0}' konnte nicht geöffnet werden.</value>
    <comment>{0} - A filename.</comment>
  </data>
  <data name="ErrorReadingFile_file" xml:space="preserve">
    <value>Beim Lesen der Datei „{0}“ ist ein Fehler aufgetreten.</value>
    <comment>{0} - A filename.</comment>
  </data>
  <data name="FileDoesNotSupportSeeking_file" xml:space="preserve">
    <value>Die Datei „{0}“ unterstützt keine Suche.</value>
    <comment>{0} - A filename.</comment>
  </data>
  <data name="DestinationMustNotBeEmpty" xml:space="preserve">
    <value>Der Archivzielpfad darf nicht leer sein.</value>
  </data>
  <data name="UnknownError" xml:space="preserve">
    <value>Unbekannter Fehler.</value>
  </data>
</root>